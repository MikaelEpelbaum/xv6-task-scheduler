diff --git a/Makefile b/Makefile
index ca14d1c..e80f084 100644
--- a/Makefile
+++ b/Makefile
@@ -180,6 +180,7 @@ UPROGS=\
 	_stressfs\
 	_usertests\
 	_wc\
+	_set_priority\
 	_zombie\
 	_fairness
 
@@ -250,7 +251,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c set_priority.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/defs.h b/defs.h
index 82fb982..e8a0fce 100644
--- a/defs.h
+++ b/defs.h
@@ -120,6 +120,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int	            set_priority(int priority);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..4309a10 100644
--- a/proc.c
+++ b/proc.c
@@ -532,3 +532,29 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+int
+set_priority(int priority) {
+  struct proc *curproc = myproc();
+  acquire(&ptable.lock);
+
+  if(0>priority || priority> 2)
+	return 1;
+  if(priority==0){
+	curproc->priority=0;
+	curproc->ticks=32;
+	}
+  if(priority==1){
+	curproc->priority=1;
+	curproc->ticks=16;
+	}
+  if(priority==2){
+	curproc->priority=2;
+	curproc->ticks=8;
+	}
+
+  curproc->state=RUNNABLE;
+  sched();
+  release(&ptable.lock);
+return 22;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..437f6e7 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/set_priority.c b/set_priority.c
deleted file mode 100644
index 14b06dc..0000000
--- a/set_priority.c
+++ /dev/null
@@ -1,8 +0,0 @@
-
-int set_priority(int prio)
-{
-
-    // TODO: replace the content of this function
-    return 0;
-}
-
diff --git a/syscall.c b/syscall.c
index d2218c3..ec46644 100644
--- a/syscall.c
+++ b/syscall.c
@@ -104,6 +104,8 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_halt(void);
+extern int sys_set_priority(void);
+
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -126,7 +128,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_halt]    sys_halt
+[SYS_halt]    sys_halt,
+[SYS_set_priority]   sys_set_priority
+
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 1dd7b9b..b733fbe 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_halt   50
+#define SYS_set_priority 22
diff --git a/sysproc.c b/sysproc.c
index 4fc95e9..f0b47ff 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -97,4 +97,14 @@ sys_halt(void)
   return 0;
 }
 
+int
+sys_set_priority(void)
+{
+  int priority;
+  if(argint(0, &priority) < 0)
+    return -1;
+
+  return set_priority(priority);
+
+}
 
diff --git a/user.h b/user.h
index 14f64db..2e630f6 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int halt(void);
+int set_priority(int priority);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 0d4eaed..9f6bff1 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(halt)
+SYSCALL(set_priority)
