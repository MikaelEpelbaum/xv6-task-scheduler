diff --git a/Makefile b/Makefile
index ca14d1c..cbdc61e 100644
--- a/Makefile
+++ b/Makefile
@@ -143,7 +143,7 @@ tags: $(OBJS) entryother.S _init
 vectors.S: vectors.pl
 	./vectors.pl > vectors.S
 
-ULIB = ulib.o usys.o printf.o umalloc.o check_proc_order.o set_priority.o
+ULIB = ulib.o usys.o printf.o umalloc.o check_proc_order.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
diff --git a/defs.h b/defs.h
index 82fb982..05a9a86 100644
--- a/defs.h
+++ b/defs.h
@@ -112,6 +112,8 @@ struct cpu*     mycpu(void);
 struct proc*    myproc();
 void            pinit(void);
 void            procdump(void);
+void            run_proc(struct proc*);
+int			check_if_prio_exists(int);
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            setproc(struct proc*);
@@ -120,6 +122,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int	          set_priority(int priority);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..51fa1da 100644
--- a/proc.c
+++ b/proc.c
@@ -319,42 +319,77 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
-void
-scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
-  c->proc = 0;
-  
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
 
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+void run_proc(struct proc *p) {
+    struct cpu *c = mycpu();
+    c->proc = 0;
+    int cnt = 0;
+    while (cnt < 9 && p->state == RUNNABLE && p->ticks > 0) {
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
+        p->ticks--;
+        cnt++;
     }
-    release(&ptable.lock);
-
-  }
+    c->proc = 0;
+}
+int check_if_prio_exists(int a){
+    struct proc *p;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p -> priority == a)
+            return 1;
+    }
+    return 0;
 }
 
+#define L cprintf("%d \n", __LINE__)
+void
+scheduler(void) {
+    struct proc *p;
+    struct proc *validator;
+
+    for (;;) {
+        // Enable interrupts on this processor.
+        sti();
+        // Loop over process table looking for process to run.
+        acquire(&ptable.lock);
+        goto runner;
+
+        runner:
+        for (validator = ptable.proc; validator < &ptable.proc[NPROC]; validator++) {
+            if (validator->state != RUNNABLE)
+                continue;
+            for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+                    if (p->priority == 2) {
+                        p->ticks = 8;
+                        run_proc(p);
+                    }
+            }
+            if (check_if_prio_exists(2))
+                goto runner;
+            for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+                if (p->priority == 1) {
+                    p->ticks = 16;
+                    run_proc(p);
+                }
+            }
+            if (check_if_prio_exists(1))
+                goto runner;
+            for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+                if (p->priority == 0) {
+                    p->ticks = 32;
+                    run_proc(p);
+                }
+            }
+            if (check_if_prio_exists(0))
+                goto runner;
+        }
+        release(&ptable.lock);
+    }
+}
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +567,29 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+int
+set_priority(int priority) {
+  struct proc *curproc = myproc();
+  acquire(&ptable.lock);
+
+  if(0>priority || priority> 2)
+	return 1;
+  if(priority==0){
+	curproc->priority=0;
+	curproc->ticks=32;
+	}
+  if(priority==1){
+	curproc->priority=1;
+	curproc->ticks=16;
+	}
+  if(priority==2){
+	curproc->priority=2;
+	curproc->ticks=8;
+	}
+
+  curproc->state=RUNNABLE;
+  sched();
+  release(&ptable.lock);
+return 22;
+}
diff --git a/proc.h b/proc.h
index 1647114..d4c4651 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;
+  int ticks;
+  int a;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/set_priority.c b/set_priority.c
deleted file mode 100644
index 14b06dc..0000000
--- a/set_priority.c
+++ /dev/null
@@ -1,8 +0,0 @@
-
-int set_priority(int prio)
-{
-
-    // TODO: replace the content of this function
-    return 0;
-}
-
diff --git a/syscall.c b/syscall.c
index d2218c3..ec46644 100644
--- a/syscall.c
+++ b/syscall.c
@@ -104,6 +104,8 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_halt(void);
+extern int sys_set_priority(void);
+
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -126,7 +128,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_halt]    sys_halt
+[SYS_halt]    sys_halt,
+[SYS_set_priority]   sys_set_priority
+
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 1dd7b9b..b733fbe 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_halt   50
+#define SYS_set_priority 22
diff --git a/sysproc.c b/sysproc.c
index 4fc95e9..f0b47ff 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -97,4 +97,14 @@ sys_halt(void)
   return 0;
 }
 
+int
+sys_set_priority(void)
+{
+  int priority;
+  if(argint(0, &priority) < 0)
+    return -1;
+
+  return set_priority(priority);
+
+}
 
diff --git a/user.h b/user.h
index 14f64db..2e630f6 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int halt(void);
+int set_priority(int priority);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 0d4eaed..9f6bff1 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(halt)
+SYSCALL(set_priority)
